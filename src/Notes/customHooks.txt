


Custom HOOKS

    > For reuse stateful logic across components
    > Extract logic from components 
      and share it between components
    > Without having to duplicate code.
    > Always start with use


    EXAMPLE:


      import { useState, useEffect } from 'react';

        const useFetch = (url) => {

          const [data, setData] = useState(null);
          const [loading, setLoading] = useState(true);
          const [error, setError] = useState(null);

          useEffect(() => {
            const fetchData = async () => {
              setLoading(true);
              try {
                const response = await fetch(url);
                if (!response.ok) {
                  throw new Error('Network response was not ok');
                }
                const result = await response.json();
                setData(result);
              } catch (error) {
                setError(error.message);
              } finally {
                setLoading(false);
              }
            };

            fetchData();
          }, [url]);

          return { data, loading, error };
        };

        export default useFetch;




        //Using the custom hook in a component:
           
            import React from 'react';
            import useFetch from './useFetch';

            const DataDisplay = () => {
              const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/posts'); // Example API

              if (loading) {
                return <div>Loading...</div>;
              }

              if (error) {
                return <div>Error: {error}</div>;
              }

              return (
                <div>
                  <h2>Fetched Data:</h2>
                  <ul>
                    {data.map((post) => (
                      <li key={post.id}>
                        <strong>{post.title}</strong>: {post.body}
                      </li>
                    ))}
                  </ul>
                </div>
              );
            };

            export default DataDisplay;
 



      