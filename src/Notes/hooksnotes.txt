

HOOKS

> Functions that provide functional components with the ability to use states, LC methods and manage side effects.
> Pass custom data to your component
> share state between components
> Reuse logic
> Extract logic from components and share it between components



> useState : 
  > Manage states. 
  > Returns a STATEFUL VALUE and an UPDATER FUNCTION to update it.

  > EXAMPLE: 
            function Counter() {
            const [count, setCount] = useState(0);

             return (
                <div>
                <p>Count: {count}</p>
                <button onClick={() => setCount(count + 1)} >Increment</button>
                </div>
            );
            }




> useEffect : 
  > Manage side-effects like API calls, subscriptions, timers, mutations

  > Mimic componentDidMount, componentDidUpdate, and componentWillUnmount
  
  > EXAMPLE:
           function Timer() {
           const [seconds, setSeconds] = useState(0);

            useEffect(() => {
                const interval = setInterval(() => {
                setSeconds(prevSeconds => prevSeconds + 1);
                }, 1000);

                // Cleanup interval on unmount
            return () => clearInterval(interval);
            }, []); 
             // Empty array means this effect only runs once on mount

            return <p>Seconds: {seconds}</p>;
            }



///////////////////
          const dataFetchComp = () => {
              const [data, setData] = useState(null);
              const [error, setError] = useState(null)

              const fetchData = async () => {
                setError(null);

                try {
                const response = await fetch ("data-end-point");

                if(!response.ok){
                  throw new Error("Some Issues");
                }

                const result = await response.json();
                setData(result);
              }catch(err){
                setError(err.message)
              }
              }
          

          useEffect(() => {
            fetchData();
          }, [])


          if (error) return <div>Error: {error}</div>; // Render error message

          return <div>{data ? data.title : "Loading..."}</div>;
          }

          //// to implement data fetching throug button click, 
          //// take fetchData() out of useEffect and add it in a button
          
/////////////////////////



import React, { useState } from "react";

const WorkArea = () => {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [status, setStatus] = useState("idle"); // 'idle' | 'loading' | 'success' | 'error'

  const fetchData = async () => {
    if (status === "success") {
      alert("Data was already fetched!");
      return;
    }

    setStatus("loading");
    setError(null);

    try {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/todos"
      );

      if (!response.ok) {
        throw new Error("Failed to fetch data");
      }

      const result = await response.json();
      setData(result);
      setStatus("success");
    } catch (error) {
      setError(error.message);
      setStatus("error");
    }
  };

  const buttonText = {
    idle: "Fetch Data",
    loading: "Fetching...",
    success: "✓ Data Fetched",
    error: "⚠ Try Again",
  };

  const buttonColor = {
    idle: "#2196F3",
    loading: "#FFC107",
    success: "#4CAF50",
    error: "#F44336",
  };

  return (
    <div style={{ padding: "20px" }}>
      <button
        onClick={fetchData}
        disabled={status === "loading"}
        style={{
          padding: "8px 16px",
          backgroundColor: buttonColor[status],
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: status === "loading" ? "wait" : "pointer",
          marginBottom: "20px",
          minWidth: "120px",
          transition: "all 0.3s ease",
        }}
      >
        {buttonText[status]}
      </button>

      {status === "error" && (
        <div style={{ color: "red", marginBottom: "10px" }}>Error: {error}</div>
      )}

      {data && (
        <ul style={{ listStyle: "none", padding: 0 }}>
          {data.slice(0, 5).map((item) => (
            <li
              key={item.id}
              style={{
                padding: "8px",
                margin: "4px 0",
                backgroundColor: "#f5f5f5",
                borderRadius: "4px",
              }}
            >
              {item.title}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default WorkArea;



/////////////////////////







> useContext :
  > It's a way to share values (like state, functions, or any data) between components
   without explicitly passing props through every level of the component tree.
  > Return the current value for a context.
  > create context ( createContext() ) -->  consume context ( contextname.provider )  --> Wrap the context
  > useContext() used for access values


> Key Points
  createContext(defaultValue): 
    Creates a context object. The defaultValue is only used when a component doesn't have a matching Provider above it.

  Context.Provider:
    Every context object comes with a Provider component that allows consuming components to subscribe to context changes.

  useContext(MyContext):
    Accepts a context object and returns the current context value for that context.




  >BASIC USAGE:
        import React, { useContext } from 'react';

          // 1. Create a context
          const MyContext = React.createContext(defaultValue);

          // 2. Provide the context value
          function App() {
            return (
              <MyContext.Provider value={/* some value */}>
                <ChildComponent />
              </MyContext.Provider>
            );
          }

          // 3. Consume the context value
          function ChildComponent() {
            const contextValue = useContext(MyContext);
            // use contextValue here
          }

  >EXAMPLE:


src/
├── contexts/          // All context logic here
│   └── ThemeContext.js
├── components/        // Reusable components
│   ├── Toolbar.js
│   └── ThemedButton.js
└── App.js            // Main entry point


1. Context File (contexts/ThemeContext.js)

      import { createContext, useContext, useState } from 'react';

      // Create context
      export const ThemeContext = createContext();

      // Provider component
      export const ThemeProvider = ({ children }) => {
        const [theme, setTheme] = useState('light');

        const toggleTheme = () => {
          setTheme(prev => (prev === 'light' ? 'dark' : 'light'));
        };

        return (
          <ThemeContext.Provider value={{ theme, toggleTheme }}>
            {children}
          </ThemeContext.Provider>
        );
      };

      // Custom hook for easy consumption
      export const useTheme = () => useContext(ThemeContext);


2. Button Component (components/ThemedButton.js)

  import { useTheme } from '../contexts/ThemeContext';

    export const ThemedButton = () => {
      const { theme, toggleTheme } = useTheme();

      return (
        <button
          onClick={toggleTheme}
          style={{
            background: theme === 'light' ? '#fff' : '#333',
            color: theme === 'light' ? '#000' : '#fff',
            padding: '10px 20px',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          Toggle Theme ({theme})
        </button>
      );
    };



3. Toolbar Component (components/Toolbar.js)

  import { ThemedButton } from './ThemedButton';

    export const Toolbar = () => {
      return (
        <div style={{ padding: '20px', border: '1px solid #ddd' }}>
          <h2>Toolbar</h2>
          <ThemedButton />
        </div>
      );
    };


4. Main App (App.js)

    import { ThemeProvider } from './contexts/ThemeContext';
    import { Toolbar } from './components/Toolbar';
    
    export default function App() {
      return (
        <ThemeProvider>
          <div style={{ padding: '40px' }}>
            <h1>App (Theme Provider Wrapper)</h1>
            <Toolbar />
          </div>
        </ThemeProvider>
      );
    }





/////////////////////////




> useReducer : 
  > similar to useState
  > Manging complex state management
  > use reducer functionngn
  > Used when next state depends on previous state
  > const [state, dispatch] = useReducer(reducer, initial)

  >EXAMPLE : 
            import React, { useEffect } from "react";
            import { useReducer, useState } from "react";
            
            const initialState = { count: 0 };
            
            const reducer = (state, action) => {
              switch (action.type) {
                case "INCREMENT":
                  return {
                    count: state.count + action.payload,
                  };
            
                case "DECREMENT":
                  return {
                    count: state.count - action.payload,
                  };
            
                case "RESET":
                  return (
                    initialState
                  );
                default:
                  return state;
              }
            };
            
            
            const Rough = () => {
            
                const [state, dispatch] = useReducer(reducer, initialState);
            
                ///optional
                const [delayedCount, setDelayedCount] = useState(0);
            
            
                ///optional
                useEffect(() => {
                  const timer = setTimeout(() => {
                    setDelayedCount(state.count);
                  }, 3000);
            
                  return () => clearTimeout(timer);
                }, [state.count])
                
            
            
                
              return (
              
              <>
              <h2>{delayedCount}</h2>
              <button onClick={() => dispatch({ type: 'INCREMENT', payload: 1})}>ADD</button>
              <button onClick={() => dispatch({type:'DECREMENT', payload: 1})}>Sub</button>
              <button onClick={() => dispatch({type: 'RESET'})}>Reset</button>
              </>
            );
            };
            
            export default Rough;




//////////////////////////////////////


> useRef : 
  > lets you reference a value that's not needed for rendering
  > Accesses DOM elements directly
  > stores mutable values
  > without triggering re-render
  > Basic Syntax : const ref = useRef(initialValue);

Example 1: Accessing DOM Elements (Most Common Use)

  import { useRef } from 'react';

    function TextInputWithFocus() {
      const inputRef = useRef(null);
    
      const handleClick = () => {
        // Focus the input element
        inputRef.current.focus();
        // You can also access other DOM properties:
        // inputRef.current.value = 'Hello';
      };
    
      return (
        <div>
          <input ref={inputRef} type="text" />
          <button onClick={handleClick}>Focus the input</button>
        </div>
      );
    }


Example 2: Storing Mutable Values (Like Instance Variables)

    import React from 'react'
import { useEffect, useState } from 'react';
import { useRef } from 'react';

const WorkArea = () => {
  const [count, setCount] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef();

  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(() => {
        setCount((prevCount) => prevCount + 1);
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }

    return () => clearInterval(intervalRef.current);
  }, [isRunning]);

  const startTimer = () => {
    setIsRunning(true);
  };

  const stopTimer = () => {
    setIsRunning(false);
  };

  return (
    <div>
      <p>{count}</p>
      {!isRunning ? (
        <button onClick={startTimer}>Start Timer</button>
      ) : (
        <button onClick={stopTimer}>Stop Timer</button>
      )}
    </div>
  );
};

export default WorkArea;


///////////

3. Video/Audio Players


    function VideoPlayer() {
  const videoRef = useRef(null);

  const handlePlay = () => videoRef.current.play();
  const handlePause = () => videoRef.current.pause();

  return (
    <div>
      <video ref={videoRef} src="movie.mp4" />
      <button onClick={handlePlay}>Play</button>
      <button onClick={handlePause}>Pause</button>
    </div>
  );
}



  ///////////////////////////////////


> useMemo : 
  >A React Hook that memoizes (caches) expensive calculations to optimize performance by avoiding unnecessary recalculations on every render.
  > Use when you want to memoize the result of a computation to avoid recalculating it unnecessarily.
  > Optimizes performance by memoizing expensive calculations.
  > memoize return value if no dependencies have changed.
  > Memoizing means storing the value as a cached value 
  > improves performance

  > const memoizedValue = useMemo(() => computeExpensiveValue(dependencies), [dependencies]);


> EXAMPLE : 

src/
├── components/
│   ├── Filters.js      
│   └── ProductList.js
└── App.js


        import { useState } from 'react'
            import './App.css'
            import Filters from './components/Filters'
            import ProductList from './components/ProductList'

            function App() {
            
              const [products] = useState([
                { id: 1, name: "Laptop", category: "electronics", price: 999, rating: 4.5 },
                { id: 2, name: "T-shirt", category: "clothing", price: 20, rating: 3.8 },
                { id: 3, name: "Headphones", category: "electronics", price: 150, rating: 4.2 }
              ]);

              const [filter, setFilter] = useState("all");
              const [sortBy, setSortBy] = useState("price")


              return (
                <>
                <Filters 
                            filter={filter} 
                            setFilter={setFilter}
                            sortBy={sortBy}
                            setSortBy={setSortBy}
                          />
                          <ProductList 
                            products={products} 
                            filter={filter} 
                            sortBy={sortBy} 
                          />


                </>
              )
            }

export default App




import React from 'react'

const Filters = ({ filter, setFilter, sortBy, setSortBy }) => {
  return (
    <div style={{ marginBottom: '20px' }}>
      <h3>Filters</h3>
      <select 
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
        style={{ marginRight: '10px' }}
      >
        <option value="all">All</option>
        <option value="electronics">Electronics</option>
        <option value="clothing">Clothing</option>
      </select>

      <label style={{ marginRight: '10px' }}>
        <input
          type="radio"
          checked={sortBy === 'price'}
          onChange={() => setSortBy('price')}
        /> Price
      </label>
      <label>
        <input
          type="radio"
          checked={sortBy === 'rating'}
          onChange={() => setSortBy('rating')}
        /> Rating
      </label>
    </div>
  )
}

export default Filters





      

import React from 'react'
import { useMemo } from 'react';

const ProductList = ({products, filter, sortBy}) => {

    const filteredProducts = useMemo(() => {
        console.log('Filtering products...');
        return filter === 'all' 
          ? products 
          : products.filter(p => p.category === filter);
      }, [products, filter]);
    
      const sortedProducts = useMemo(() => {
        console.log('Sorting products...');
        return [...filteredProducts].sort((a, b) => {
          return sortBy === 'price' 
            ? a.price - b.price 
            : b.rating - a.rating;
        });
      }, [filteredProducts, sortBy]);
    
  return (
    <div>
    <h3>Products ({sortedProducts.length})</h3>
    <ul style={{ listStyle: 'none', padding: 0 }}>
      {sortedProducts.map(product => (
        <li key={product.id} style={{ margin: '10px 0', padding: '10px', border: '1px solid #eee' }}>
          <strong>{product.name}</strong> - ${product.price} 
          <span style={{ color: 'green' }}> ★ {product.rating}</span>
        </li>
      ))}
    </ul>
  </div>
  )
}

export default ProductList

          




> useCallback : 
  > Use when you want to memoize a function to ensure it does not get recreated unnecessarily.
  > Memoizes a callback FUNCTION and returns it.
  > Prevents unnecessary re-creations on re-renders.

  > const memoizedCallback = useCallback(() => doSomething(dependencies), [dependencies]);

  >EXAMPLE : 
             import React, { useCallback, useState } from 'react';

             function Button({ onClick, label }) {
               return <button onClick={onClick}>{label}</button>;
             }

             function App() {
               const [count, setCount] = useState(0);

               const handleClick = useCallback(() => {
                 setCount(count + 1);
               }, [count]);

               return (
                 <div>
                   <p>Count: {count}</p>
                   <Button onClick={handleClick} label="Increment" />
                 </div>
               );
             }